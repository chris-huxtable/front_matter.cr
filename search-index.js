crystal_doc_search_index_callback({"repository_name":"front_matter","body":"# front_matter.cr\n\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://chris-huxtable.github.io/front_matter.cr/)\n[![GitHub release](https://img.shields.io/github/release/chris-huxtable/front_matter.cr.svg)](https://github.com/chris-huxtable/front_matter.cr/releases)\n[![Build Status](https://travis-ci.org/chris-huxtable/front_matter.cr.svg?branch=master)](https://travis-ci.org/chris-huxtable/front_matter.cr)\n\nSeparates a files front matter from its content. Unlike Jekyll and others this implementation is format agnostic.\n\n## Front Matter?\n\nFront matter is metadata you can add to a document. The data is located between a pair of `---` lines at the start of a document. With this parser the format can be any format you would like.\n```\n---\nThe front matter\n---\n\nThe content\n```\n\nA more practical and complicated example using YAML front matter with Liquid to generate some HTMLc ould look like below.\n```\n---\nlayout: post\ntitle: Blogging Like a Hacker\n---\n\n<h1>{{ title }}</h1>\n<p>This is the content.</p>\n```\n\nOne of the most common, but not the only, uses for front matter is to use this with [Liquid](https://shopify.github.io/liquid/) ([crystal implementation](https://github.com/wmoxam/liquid-crystal)), or a similar templating language.\n\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  front_matter:\n    github: chris-huxtable/front_matter.cr\n```\n\n\n## Usage\n\n```crystal\nrequire \"front_matter\"\n```\n\nTo process a file:\n\n```crystal\nFrontMatter.open(\"/path/to/file\") { |front_matter, content_io|\n\n\t# Do something with the front matter and content.\n\t# Parse the front matter as YAML, JSON or something else?\n\n}\n```\n\nAlternatively you can parse an `IO` so long as it supports the `#.seek` method\n```crystal\nFile.open(filename, \"r\") { |fd|\n\tFrontMatter.parse(fd) { |front_matter, content_io|\n\n\t\t# Do something with the front matter and content.\n\t\t# Parse the front matter as YAML, JSON or something else?\n\n\t}\n}\n```\n\n\n## Contributing\n\n1. Fork it ( https://github.com/chris-huxtable/front_matter.cr/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n\n## Contributors\n\n- [Chris Huxtable](https://github.com/chris-huxtable) - creator, maintainer\n","program":{"html_id":"front_matter/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"front_matter","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"front_matter/FrontMatter","path":"FrontMatter.html","kind":"module","full_name":"FrontMatter","name":"FrontMatter","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/front_matter.cr","line_number":16,"url":"https://github.com/chris-huxtable/front_matter.cr/blob/202b1232a44d3f429b44f0a39bacc0f3a0baae9a/src/front_matter.cr#L16"}],"repository_name":"front_matter","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"open(filename:String,skip_newlines:Bool=true,strip:Bool=true,&block:String,IO::FileDescriptor->Nil):Nil-class-method","html_id":"open(filename:String,skip_newlines:Bool=true,strip:Bool=true,&block:String,IO::FileDescriptor->Nil):Nil-class-method","name":"open","doc":"Opens the file named by filename. Yields the frontmatter as a `String` and the\nfile descriptor positioned at the start of the content to the given block. If\nthe contents leading newlines are desired setting *skip_newlines* to `false`\nwill prevent it from being skipped. By defualt the resultant front matter\nstring will be stripped. To prevent this add the arguement `strip: false`.","summary":"<p>Opens the file named by filename.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"args_string":"(filename : String, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, IO::FileDescriptor -> Nil) : Nil","args_html":"(filename : String, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, IO::FileDescriptor -> Nil) : Nil","location":{"filename":"src/front_matter.cr","line_number":52,"url":"https://github.com/chris-huxtable/front_matter.cr/blob/202b1232a44d3f429b44f0a39bacc0f3a0baae9a/src/front_matter.cr#L52"},"def":{"name":"open","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String, IO::FileDescriptor -> Nil)"},"return_type":"Nil","visibility":"Public","body":"File.open(filename, \"r\") do |fd|\n  parse(fd, skip_newlines, strip: strip) do |fm, fd_n|\n    yield fm, fd\n  end\nend"}},{"id":"parse(io:IO,skip_newlines:Bool=true,strip:Bool=true,&block:String,IO->Nil):Nil-class-method","html_id":"parse(io:IO,skip_newlines:Bool=true,strip:Bool=true,&block:String,IO->Nil):Nil-class-method","name":"parse","doc":"Parses the `IO` given as *io*. Yields the frontmatter as a `String` and the\n`IO` positioned at the start of the content to the given block. If\nthe contents leading newlines are desired setting *skip_newlines* to `false`\nwill prevent it from being skipped. By defualt the resultant front matter\nstring will be chomp'ed. To prevent this add the arguement `chomp: false`.\n\nNote: The provided `IO` must support `#.seek`.","summary":"<p>Parses the <code>IO</code> given as <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"args_string":"(io : IO, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, IO -> Nil) : Nil","args_html":"(io : IO, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, IO -> Nil) : Nil","location":{"filename":"src/front_matter.cr","line_number":25,"url":"https://github.com/chris-huxtable/front_matter.cr/blob/202b1232a44d3f429b44f0a39bacc0f3a0baae9a/src/front_matter.cr#L25"},"def":{"name":"parse","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String, IO -> Nil)"},"return_type":"Nil","visibility":"Public","body":"expect_sequence(io, \"---\\n\")\nfront = IO::Memory.new\nwhile (char = next_char(io))\n  front << char\n  if (  char != '\\n')\n    next\n  end\n  if (  !(test_sequence(io, \"---\\n\")))\n    next\n  end\n  break\nend\nif (next_char(io).nil?)\n  raise(MalformedError.eof)\nend\nio.seek(-1, IO::Seek::Current)\nif (skip_newlines)\n  skip_newlines(io)\nend\nfront = front.to_s\nif (strip)\n  front = front.strip\nend\nyield front, io\n"}},{"id":"parse(string:String,skip_newlines:Bool=true,strip:Bool=true,&block:String,String->Nil):Nil-class-method","html_id":"parse(string:String,skip_newlines:Bool=true,strip:Bool=true,&block:String,String->Nil):Nil-class-method","name":"parse","doc":"Parses the `String` given as *string*. Yields the frontmatter as a `String`\nand the remaineder as a `String` to the given block. If the contents leading\nnewlines are desired setting *skip_newlines* to `false` will prevent it\nfrom being skipped. By defualt the resultant front matter string will be\nstripped. To prevent this add the arguement `strip: false`.\n\nNote: This should not be used in most cases. It converts between `String`\nand `IO::Memory` numerous times and is only included to make testing easier.","summary":"<p>Parses the <code>String</code> given as <em>string</em>.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"args_string":"(string : String, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, String -> Nil) : Nil","args_html":"(string : String, skip_newlines : Bool = <span class=\"n\">true</span>, strip : Bool = <span class=\"n\">true</span>, &block : String, String -> Nil) : Nil","location":{"filename":"src/front_matter.cr","line_number":66,"url":"https://github.com/chris-huxtable/front_matter.cr/blob/202b1232a44d3f429b44f0a39bacc0f3a0baae9a/src/front_matter.cr#L66"},"def":{"name":"parse","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"skip_newlines","doc":null,"default_value":"true","external_name":"skip_newlines","restriction":"Bool"},{"name":"strip","doc":null,"default_value":"true","external_name":"strip","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String, String -> Nil)"},"return_type":"Nil","visibility":"Public","body":"io = IO::Memory.new(string)\nparse(io, skip_newlines, strip: strip) do |fm, fd|\n  yield fm, fd.gets_to_end\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"front_matter/FrontMatter/MalformedError","path":"FrontMatter/MalformedError.html","kind":"class","full_name":"FrontMatter::MalformedError","name":"MalformedError","abstract":false,"superclass":{"html_id":"front_matter/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"front_matter/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"front_matter/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"front_matter/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/front_matter.cr","line_number":110,"url":"https://github.com/chris-huxtable/front_matter.cr/blob/202b1232a44d3f429b44f0a39bacc0f3a0baae9a/src/front_matter.cr#L110"}],"repository_name":"front_matter","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"front_matter/FrontMatter","kind":"module","full_name":"FrontMatter","name":"FrontMatter"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})